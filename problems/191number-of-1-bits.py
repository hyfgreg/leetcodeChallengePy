"""
191. 位1的个数
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。



提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。


示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
示例 2：

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
示例 3：

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。


提示：

输入必须是长度为 32 的 二进制串 。


进阶：

如果多次调用这个函数，你将如何优化你的算法？
通过次数192,424提交次数256,806

tag: 位运算
背诵 要理解这个方法，本质是分治
"""


class Solution:
    def hammingWeight(self, n: int) -> int:
        n = self.single(n, 1, 0x55555555)  # 01010101010101010101010101010101
        n = self.single(n, 2, 0x33333333)  # 00110011001100110011001100110011
        n = self.single(n, 4, 0x0f0f0f0f)  # 00001111000011110000111100001111
        n = self.single(n, 8, 0x00ff00ff)  # 00000000111111110000000011111111
        n = self.single(n, 16, 0x0000ffff)  # 00000000000000001111111111111111
        return n

    def single(self, n, bit, mask):
        # tmp = n >> bit
        # return (n & mask) + (tmp & mask)
        return (n & mask) + ((n >> bit) & mask)

    def other(self, n: int) -> int:
        ret = 0
        while n:
            n &= (n - 1)  # 等于把最后边的1变成0
            ret += 1
        return ret


if __name__ == '__main__':
    s = Solution()
    n = 156
    print(s.other(n))
